# Name of the workflow as it appears in GitHub Actions UI
name: Weekly CV Update

# Triggers for this workflow
on:
    # Schedule the workflow to run weekly
    # Your chosen cron expression: Every Monday at 9:00 UTC
    schedule:
    - cron: '0 9 * * 1'

# Allows you to run this workflow manually from the Actions tab in GitHub
workflow_dispatch:
    
    # Permissions granted to the workflow job
    # 'contents: write' is crucial for the action to be able to commit and push files back to the repo.
    permissions:
    contents: write # This line is essential for git push to work

# Define a single job named 'build-cv'
jobs:
    build-cv:
    # The runner environment for this job
    runs-on: ubuntu-latest
# Run this job inside a Docker container
container:
    # Using the Docker image you provided, which is designed for R/RMarkdown/vitae
    image: mlampros/mycvitae:rstudiodev

# Steps in the job
steps:
    # Step 1: Checkout the repository code
    # This action brings your repository's code onto the container.
    - name: Checkout repository
uses: actions/checkout@v4

# Step 2: Install R packages (within the Docker container)
# Even with a specialized Docker image, some packages might not be pre-installed
# or you might want the latest versions.
- name: Install R packages
run: |
    # Use check for existence before installing to avoid re-installing
    # packages that might already be present in the Docker image.
    # We specify the CRAN repo for consistency.
    Rscript -e '
            pkgs <- c("vitae", "tibble", "RefManageR", "rmarkdown", "knitr", "httr", "jsonlite", "rorcid");
            install_if_missing <- function(p) {
              if (!require(p, character.only = TRUE)) {
                install.packages(p, repos = "https://cran.r-project.org");
              }
            };
            sapply(pkgs, install_if_missing);
          '

# Step 3: Check for required lua filter file
# The cv.Rmd uses --lua-filter=lua/strong.lua, so this file needs to exist in your repo.
- name: Check for lua/strong.lua
run: |
    if [ ! -f "lua/strong.lua" ]; then
echo "Error: lua/strong.lua not found! This file is referenced in cv.Rmd and is required for compilation."
exit 1
fi

# Step 4: Run the ORCID paper collection script
# This script should generate/update jaron_published_orcid.bib.
# The ORCID_TOKEN secret is passed as an environment variable to the container.
- name: Run ORCID paper collection script
run: Rscript get_orcid_papers.R
env:
    ORCID_TOKEN: ${{ secrets.ORCID_TOKEN }} # Pass the ORCID_TOKEN from GitHub Secrets

# Step 5: Knit the CV R Markdown file to PDF
# This command will compile your R Markdown file into cv.pdf.
- name: Knit CV
run: Rscript -e 'rmarkdown::render("cv.Rmd")'

# Step 6: Commit and push the updated files
# Using stefanzweifel/git-auto-commit-action for simplicity and robustness.
# It automatically handles git configuration, adding, committing, and pushing.
- name: Commit and push updated files
uses: stefanzweifel/git-auto-commit-action@v5
with:
    commit_message: "Automated weekly update of CV and bibliography" # Message for the commit
# Specify the files to commit. This ensures only these files are handled.
files: |
    jaron_published_orcid.bib
cv.pdf
